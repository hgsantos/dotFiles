set RED '\033[0;31m'
set GREEN '\033[0;32m'
set NC '\033[0m'

function commit
    set commitMessage "$argv"

    git add .

    if test -z "$commitMessage"
        aicommits
        return
    end

    eval "git commit -a -m '$commitMessage'"
end

function mk
    mkdir -p "$argv"
    cd "$argv"
end

function a
    php artisan "$argv"
end

function nb
    git checkout -b $argv[1]
end

function cb
    git checkout $argv[1]
end

function dev
    set colors "#c4b5fd,#93c5fd,#fb7185,#fdba74"
    npx concurrently -c $colors \
        "php artisan reverb:start" \
        "php artisan horizon" \
        "php artisan pail --timeout=0" \
        "yarn dev" \
        --names reverb,horizon,logs,vite
end

function vl
    set secure 0
    set project ""
    set directory (pwd)

    for arg in $argv
        switch $arg
            case "-s"
                set secure 1
            case "*"
                set project $arg
        end
    end

    if test -z "$project"
        set project (basename $PWD)
    end

    set link_path ~/codes/.valet/$project

    if test -L $link_path
        echo "‚ö†Ô∏è  Link '$project' j√° existe em .valet"
        read -l -P "üîÅ Deseja sobrescrever? (s/n): " confirm
        if test "$confirm" != "s"
            echo "‚ùå Cancelado."
            return 1
        end
        rm $link_path
    end

    echo "üîó Criando link simb√≥lico em .valet/$project"
    ln -s $directory $link_path

    if test $secure -eq 1
        echo "üîí Ativando SSL para $project..."
        valet secure $project
    else
        valet link $project > /dev/null
    end

    set protocol (test $secure -eq 1; and echo "https"; or echo "http")
    echo "üåê Abrindo $protocol://$project.test"
    open "$protocol://$project.test"
end

function pr
    set -l title ""
    set -l body ""
    set -l base (git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
    set -l head (git branch --show-current)

    for i in (seq (count $argv))
        set arg $argv[$i]

        switch $arg
            case "-b"
                set i (math $i + 1)
                set body $argv[$i]
            case "-ba"
                set i (math $i + 1)
                set base $argv[$i]
            case "*"
                if test -z "$title"
                    set title $arg
                end
        end
    end

    if test -z "$title"
        echo "‚ùå T√≠tulo obrigat√≥rio. Use: pr \"T√≠tulo da PR\" [-b \"Corpo\"] [-ba \"branch destino\"]"
        return 1
    end

    set cmd "gh pr create --base $base --head $head --title \"$title\" --body \"$body\""

    echo "üöÄ Criando PR da branch '$head' para '$base'"
    eval $cmd
end

function ct
    if test (count $argv) -eq 0
        echo "Uso: ct [Path/]Nome"
        return 1
    end

    set rel_path (string replace -r '^/' '' $argv[1])
    set first (string sub -s 1 -l 1 $rel_path | string upper)
    set rest (string sub -s 2 $rel_path)
    set rel_path $first$rest
    set full_path "./tests/Feature/$rel_path"Test.php

    set dir (dirname $full_path)
    mkdir -p $dir

    if not test -e $full_path
        echo "üî• Criando: $full_path"
        set test_name (string replace -a '/' ' ' (basename $rel_path | string replace -r '\.php$' ''))
        touch $full_path
        echo "<?php

use function Pest\\Laravel\\get;

test('$test_name', function () {
    expect(true)->toBeTrue();
});" > $full_path

        echo "‚úÖ  Teste criado com sucesso."
    else
        echo "‚ùå  O arquivo j√° existe: $full_path"
    end
end
